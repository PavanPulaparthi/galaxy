<tool id="interactive_ml_tool_jupyter_notebook" tool_type="interactive" name="GPU enabled Interactive Jupyter Notebook for Machine Learning" version="0.1">
    <requirements>
        <container type="docker">docker.io/anupkumar/docker-ml-jupyterlab:galaxy-integration</container>
    </requirements>
    <entry_points>
        <entry_point name="GPU enabled Interactive Jupyter Notebook for Machine Learning" requires_domain="True">
            <port>8888</port>
	    <url>ipython/lab</url>
        </entry_point>
    </entry_points>
    <environment_variables>
        <environment_variable name="HISTORY_ID">$__history_id__</environment_variable>
        <environment_variable name="REMOTE_HOST">$__galaxy_url__</environment_variable>
        <environment_variable name="GALAXY_WEB_PORT">8080</environment_variable>
	<environment_variable name="GALAXY_URL">$__galaxy_url__</environment_variable>
	<environment_variable name="DISABLE_AUTH">true</environment_variable>
        <environment_variable name="API_KEY" inject="api_key" />
    </environment_variables>
    <command detect_errors="aggressive"><![CDATA[
	#import re
        export GALAXY_WORKING_DIR=`pwd` &&
        mkdir -p ./jupyter/outputs/ &&
        mkdir -p ./jupyter/data &&

        #set $cleaned_name = re.sub('[^\w\-\.]', '_', str($input.element_identifier))
        ln -sf '$input' './jupyter/data/${cleaned_name}' &&

        ## change into the directory where the notebooks are located
	cd ./jupyter/ &&
	chown -R \$NB_USER:users `pwd` &&
	#if $mode.mode_select == 'scratch':
	    cp '$__tool_directory__/default_tensorflow_notebook.ipynb' ./default_tensorflow_notebook.ipynb &&
            chown \$NB_USER ./default_tensorflow_notebook.ipynb &&
            jupyter trust ./default_tensorflow_notebook.ipynb &&
	    /usr/local/bin/start-notebook.sh
	#end if
    ]]>
    </command>
    <inputs>

        <conditional name="mode">
            <param name="mode_select" type="select" label="Do you already have a notebook?" help="If not, no problem we will provide you with a default one.">
                <option value="scratch">Start with a fresh notebook</option>
		<option value="previous">Load a previous notebook</option>
            </param>
            <when value="scratch"/>
            <when value="previous">
                <param name="ipynb" type="data" format="ipynb" label="IPython Notebook"/>
                <param name="run_it" type="boolean" truevalue="true" falsevalue="false" label="Execute notebook and return a new one."
                    help="This option is useful in workflows when you just want to execute a notebook and not dive into the webfrontend."/>
            </when>
        </conditional>
        <param name="input" type="data" optional="true" label="Include data into the environment"/>

    </inputs>
    <outputs>
        <data name="jupyter_notebook" format="ipynb" label="Executed Notebook"></data>
    </outputs>
    <tests>
        <test expect_num_outputs="1">
            <param name="mode" value="previous" />
            <param name="ipynb" value="test.ipynb" />
            <param name="run_it" value="true" />
            <output name="jupyter_notebook" file="test.ipynb" ftype="ipynb"/>
        </test>
    </tests>
    <help>
    
    JupyterLab is a next-generation web-based user interface for Project Jupyter. JupyterLab enables you to work with documents and activities such as Jupyter notebooks, text editors, 
    terminals, and custom components in a flexible, integrated, and extensible manner.

    Galaxy offers you to use Jupyter Lab directly in Galaxy accessing and interacting with Galaxy datasets as you like. A very common use-case is to
    do the heavy lifting such as performing computation on GPUs and data reduction steps in Galaxy and the plotting and more `interactive` part on smaller datasets in Jupyter Lab.

    You can start with a new Jupyter Lab notebook from scratch and wait until the job starts running. Running job will provide you a link which can be opened in the same or another 
    browser tab. This link opens Jupyter Lab notebook which can be used to prototype machine learning solutions.

    </help>
</tool>
